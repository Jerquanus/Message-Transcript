{"version":3,"sources":["chatComp/chatDisplay.js","chatComp/chat.js","App.js","reportWebVitals.js","index.js"],"names":["ChatDisplay","props","console","log","chat","transcript","theMessages","messages","theDate","conversationDate","newDate","moment","format","className","style","color","date","src","image","float","borderRadius","padding","alt","message","username","timestamp","chatMessages","Chatlog","useState","setChat","useEffect","a","axios","get","then","response","allChat","data","getChat","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed982372.chunk.js","sourcesContent":["import \"./style.css\"\nimport moment from \"moment\";\n\nexport default function ChatDisplay(props) {\n    console.log(props.chat, \"THE GOODS--\")\n    const transcript = props.chat;\n    // ----- condtional rendering will be used -----\n    // added optional chaining to theMessages\n    const theMessages = transcript && transcript?.messages;\n\n    // Displaying the Date\n    const date = () => {\n        // would convert date using moment--\n        const theDate = transcript.conversationDate;\n        const newDate= moment(theDate).format(\"dddd, MMMM Do YYYY\");\n        console.log(theDate, \"what time\");\n\n        return (\n            <div className=\"wrapper\">\n                <div className=\"Lineup\">\n                    {/* flexbox or grid to seperate the date and header to display on one line */}\n                    <div className=\"Headline\" style={{color:\"#ee8065d2\"}}><h1>CHAT TRANSCRIPT</h1></div>\n                    <div className=\"Date\" style={{color:\"#9bd0e5\"}}><h1> {newDate}</h1></div>\n                </div>            \n            </div>\n        )\n\n\n    };\n\n    // Displaying the chat\n    const chatMessages = () => {\n\n\n        return (\n                <div className=\"Container\">\n\n                        <div className=\"MygelAvatar1\">\n                            <img src= {theMessages[0]?.image} style={{float: 'left', borderRadius :'180px', padding:'10px'}} alt=\"User Avatar\"\n                            className=\"HaloM\"/>\n                        </div>\n\n                        <div className=\"MygelChat1\">\n                            <p>{theMessages[0]?.message}</p>\n                            <h3 style={{color:\"#c7754f\"}}>{theMessages[0]?.username}</h3>\n                            {/* --- timestamp conversion needed using moment but since its not mapped over difficulties converting ---*/}\n                            <p>{theMessages[0]?.timestamp}</p>\n                        </div>\n\n                        <div className=\"CharlieAvatar1\">\n                            <img src= {theMessages[1]?.image} style={{float: 'right', borderRadius :'180px', padding:'10px'}} alt=\"User Avatar\"\n                            className=\"HaloC\"/>\n                        </div>\n\n                        <div className=\"CharlieChat1\">\n                            <p>{theMessages[1]?.message}</p>\n                            {/* --- timestamp conversion needed using moment (npm install)  ---*/}\n                            <h3 style={{color:\"#c7754f\"}}>{theMessages[1]?.username}</h3>\n                            <p>{theMessages[1]?.timestamp}</p>\n                        </div>\n\n                        <div  className=\"MygelAvatar2\">\n                            <img src= {theMessages[2]?.image} style={{float: 'left', borderRadius :'180px', padding:'10px'}} alt=\"User Avatar\"\n                            className=\"HaloM\"/>\n                        </div>\n\n                        <div className=\"MygelChat2\">\n                             <p>{theMessages[2]?.message}</p>\n                                {/* --- timestamp conversion needed using moment(npm install) ---*/}\n                            <h3 style={{color:\"#c7754f\"}}>{theMessages[2]?.username}</h3>\n                            <p>{theMessages[2]?.timestamp}</p>\n                        </div>\n\n                        <div className=\"CharlieAvatar2\">\n                                <img src= {theMessages[3]?.image} style={{float: 'right', borderRadius :'180px', padding:'10px'}} alt=\"User Avatar\"\n                                className=\"HaloC\"/>\n                        </div>\n\n                        <div className=\"CharlieChat2\">    \n                             <p>{theMessages[3]?.message}</p>\n                                {/* --- timestamp conversion needed using moment (npm install)  ---*/}\n                            <h3 style={{color:\"#c7754f\"}}>{theMessages[3]?.username}</h3>\n                            <p>{theMessages[3]?.timestamp}</p>\n                        </div>\n                </div>  \n        );\n    };\n\n\n\n    return (\n        <>\n        {date(props)}\n        {chatMessages(props)}\n        </>\n    )\n};","import React, { useState, useEffect } from \"react\";\nimport ChatDisplay from './chatDisplay'\nimport axios from \"axios\";\n\n\nfunction Chatlog () {\n    const [chat, setChat] = useState('');\n    // useEffect to avoid continuous loop thru api\n\n    useEffect(() => {\n        const getChat = (async () => {\n            const chat = await axios.get(\n                \"https://redventures.github.io/chatly-ifier/api/v1.json\")\n            .then ((response) => {\n                const allChat = response.data\n                setChat(allChat.data);\n            });\n            \n        });\n        getChat();\n        }, []);\n\n        return(\n            <ChatDisplay chat={chat} />\n        )\n        \n}\n\nexport default Chatlog;","import './App.css';\nimport Chatlog from './chatComp/chat'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Chatlog />\n    </div>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}